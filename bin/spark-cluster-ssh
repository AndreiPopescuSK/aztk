#!/usr/bin/env python

from redbull import clusterlib, constants

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import os
import datetime
import random
import argparse

import azure.batch.batch_service_client as batch
import azure.batch.batch_auth as batch_auth 
import azure.batch.models as batch_models
import azure.storage.blob as blob

# config file path
_config_path = os.path.join(os.path.dirname(__file__), '../configuration.cfg')

if __name__ == '__main__':

    _pool_id = None
    _jupyter = None
    _webui = None
    _masterui = None
    _user = None
    _connect = True

    # parse arguments
    parser = argparse.ArgumentParser(prog="az_spark")

    parser.add_argument("--cluster-id", required=True,
                        help="the unique name of your spark cluster")
    parser.add_argument('--masterui', 
                        help="open spark's webui on local port")
    parser.add_argument('--webui', 
                        help="open spark's webui on local port")
    parser.add_argument('--jupyter', 
                        help="open jupyter on local port")
    parser.add_argument('--user', 
                        help="ssh user")
    parser.add_argument('--no-connect',
                        dest='noconnect',
                        action='store_false',
                        default=True,
                        help="Do not create the ssh session. Only print out \
                        the command to run.")

    args = parser.parse_args()
    
    print()
    if args.cluster_id is not None:
        _pool_id = args.cluster_id
    print("spark cluster id:      %s" % _pool_id)

    if args.masterui is not None:
        _masterui = args.masterui
    print("open masterui:         %s" % _masterui)

    if args.webui is not None:
        _webui = args.webui
    print("open webui:            %s" % _webui)

    if args.jupyter is not None:
        _jupyter = args.jupyter
    print("open jupyter:          %s" % _jupyter)

    if args.user is not None:
        _user = args.user
    print("ssh user:              %s" % _user)

    if args.noconnect is not None:
        if (args.noconnect is True and _user is None):
            _connect = False
        elif (args.noconnect is False):
            _connect = False
    print("connect:               %s" % _connect)

    if (args.noconnect is True and _user is None):
            print("You must specify a user in order to connect automatically")

    # Read config file
    global_config = configparser.ConfigParser()
    global_config.read(_config_path)

    # Set up the configuration
    batch_account_key = global_config.get('Batch', 'batchaccountkey')
    batch_account_name = global_config.get('Batch', 'batchaccountname')
    batch_service_url = global_config.get('Batch', 'batchserviceurl')

    # Set up SharedKeyCredentials
    credentials = batch_auth.SharedKeyCredentials(
        batch_account_name,
        batch_account_key)

    # Set up Batch Client
    batch_client = batch.BatchServiceClient(
        credentials,
        base_url=batch_service_url)

    # Set retry policy
    batch_client.config.retry_policy.retries = 5

    # get ssh command
    clusterlib.ssh(
        batch_client, 
        pool_id = _pool_id,
        masterui = _masterui,
        webui = _webui,
        jupyter = _jupyter,
        username = _user,
        connect = _connect)
