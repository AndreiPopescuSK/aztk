#!/usr/bin/env python

from dtde import joblib, util
import argparse
import os

if __name__ == '__main__':

    pool_id = None
    wait = True

    # spark submit options we're passing through
    name = None
    app = None
    app_args = []
    main_class = None
    jars = []
    py_files = []
    files = []
    driver_java_options = None
    driver_library_path = None
    driver_class_path = None
    driver_memory = None
    executor_memory = None
    driver_cores = None
    executor_cores = None

    # parse arguments
    parser = argparse.ArgumentParser(
        prog='az-spark', 
        usage='spark-submit \n \
               --id CLUSTER_ID \n \
               --name APP_NAME \n \
               [options] \n \
               <app jar | python file> \n \
               [app arguments]')

    parser.add_argument('--id', dest='cluster_id', required=True,
                        help='The unique id of your spark cluster')

    parser.add_argument('--name', required=True,
                        help='a name for your application')

    parser.add_argument('--wait', dest='wait', action='store_true', 
                        help='Wait for app to complete')
    parser.add_argument('--no-wait', dest='wait', action='store_false', 
                        help='Do not wait for app to complete')
    parser.set_defaults(wait=True)

    parser.add_argument('--class', dest='main_class',
                        help='Your application\'s main class (for Java only).')

    parser.add_argument('--jars',
                        help='Comma-separated list of local jars to include \
                              on the driver and executor classpaths. Use \
                              absolute path to reference files.')

    parser.add_argument('--py-files',
                        help='Comma-separated list of .zip, .egg, or .py files \
                              to place on the PYTHONPATH for Python apps. Use \
                              absolute path to reference files.')

    parser.add_argument('--files',
                        help='Comma-separated list of .zip, .egg, or .py files \
                              to place on the PYTHONPATH for Python apps. Use \
                              absolute path ot reference files.')

    parser.add_argument('--driver-java-options',
                        help='Extra Java options to pass to the driver.')

    parser.add_argument('--driver-library-path',
                        help='Extra library path entries to pass to the driver.')

    parser.add_argument('--driver-class-path',
                        help='Extra class path entries to pass to the driver. \
                              Note that jars added with --jars are automatically \
                              included in the classpath.')

    parser.add_argument('--driver-memory',
                        help="Memory for driver (e.g. 1000M, 2G) (Default: 1024M).")

    parser.add_argument('--executor-memory',
                        help='Memory per executor (e.g. 1000M, 2G) (Default: 1G).')

    parser.add_argument('--driver-cores',
                        help='Cores for driver (Default: 1).')

    parser.add_argument('--executor-cores',
                        help='Number of cores per executor. (Default: All \
                              available cores on the worker')

    parser.add_argument('application', nargs='*',
                        help='App jar OR python file to execute. Use absolute \
                              path to reference file.')

    args = parser.parse_args()
    
    if args.cluster_id is not None:
        pool_id = args.cluster_id

    if args.name is not None:
        name = args.name

    if args.wait is not None:
        if args.wait == False:
            wait = False

    if args.main_class is not None:
        main_class = args.main_class

    if args.jars is not None:
        jars = args.jars.replace(' ','').split(',')

    if args.py_files is not None:
        py_files = args.py_files.replace(' ','').split(',')

    if args.files is not None:
        files = args.py_files.replace(' ','').split(',')

    if args.driver_java_options is not None:
        driver_java_options = args.driver_java_options

    if args.driver_library_path is not None:
        driver_library_path = args.driver_library_path

    if args.driver_class_path is not None:
        driver_class_path = args.driver_class_path

    if args.driver_memory is not None:
        driver_memory = args.driver_memory

    if args.executor_memory is not None:
        executor_memory = args.executor_memory

    if args.driver_cores is not None:
        driver_cores = args.driver_cores

    if args.executor_cores is not None:
        executor_cores = args.executor_cores

    if args.application is not None:
        app = args.application[0]
        if len(args.application) > 1:
            app_args = args.application[1:]

    print('-------------------------------------------')
    print('Spark cluster id:        {}'.format(pool_id))
    print('Spark app name:          {}'.format(name))
    print('Wait for app completion: {}'.format(wait))
    if main_class is not None:          
        print('Entry point class:       {}'.format(main_class))
    if jars:                
        print('JARS:                    {}'.format(jars))
    if py_files:            
        print('PY_Files:                {}'.format(py_files))
    if files:               
        print('Files:                   {}'.format(files))
    if driver_java_options is not None: 
        print('Driver java options:     {}'.format(driver_java_options))
    if driver_library_path is not None: 
        print('Driver library path:     {}'.format(driver_library_path))
    if driver_class_path is not None:   
        print('Driver class path:       {}'.format(driver_class_path))
    if driver_memory is not None:       
        print('Driver memory:           {}'.format(driver_memory))
    if executor_memory is not None:     
        print('Executor memory:         {}'.format(executor_memory))
    if driver_cores is not None:        
        print('Driver cores:            {}'.format(driver_cores))
    if executor_cores is not None:      
        print('Executor cores:          {}'.format(executor_cores))
    print('Application:             {}'.format(app))
    print('Application arguments:   {}'.format(app_args))
    print('-------------------------------------------')

    # submit job
    joblib.submit_app(
        pool_id = pool_id,
        name = name,
        app = app, 
        app_args = app_args,
        wait = wait,
        main_class = main_class,
        jars = jars, 
        py_files = py_files, 
        files = files, 
        driver_java_options = driver_java_options,
        driver_library_path = driver_library_path,
        driver_class_path = driver_class_path,
        driver_memory = driver_memory,
        executor_memory = executor_memory,
        driver_cores = driver_cores,
        executor_cores = executor_cores)
